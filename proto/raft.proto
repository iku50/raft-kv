syntax = "proto3";

package raftpb;

option go_package = "github.com/raft-kv/raft/proto";
// InstallSnapshotArgs is the argument structure for the InstallSnapshot RPC.
message InstallSnapshotArgs {
    int32 term = 1;                  // leader’s term
    int32 leader_id = 2;             // so follower can redirect clients
    int64 last_included_index = 3;   // the snapshot replaces all entries up through and including this index
    int32 last_included_term = 4;    // term of lastIncludedIndex snapshot file
    bytes data = 5;                  // raw bytes of the snapshot chunk
    bytes last_included_cmd = 6;
}

// InstallSnapshotReply is the reply structure for the InstallSnapshot RPC.
message InstallSnapshotReply {
    int32 term = 1; // currentTerm, for leader to update itself
}

// AppendEntriesArgs is the argument structure for the AppendEntries RPC.
message AppendEntriesArgs {
    int32 term = 1;            // leader’s term
    int32 leader_id = 2;        // so follower can redirect clients
    int64 prev_log_index = 3;    // index of log entry immediately preceding new ones
    int32 prev_log_term = 4;     // term of prevLogIndex entry
    repeated Entry entries = 5; // log entries to store (empty for heartbeat)
    int64 leader_commit = 6;    // leader’s commitIndex
}

// AppendEntriesReply is the reply structure for the AppendEntries RPC.
message AppendEntriesReply {
    int32 term = 1;     // currentTerm, for leader to update itself
    bool success = 2;   // true if follower contained entry matching prevLogIndex and prevLogTerm
    int32 x_term = 3;   // Follower中与Leader冲突的Log对应的Term
    int64 x_index = 4;  // Follower中，对应Term为XTerm的第一条Log条目的索引
    int64 x_len = 5;    // Follower的log的长度
}

// Entry is a log entry in the Raft algorithm.
message Entry {
    int32 term = 1;
    bytes cmd = 2; // Assuming Cmd can be serialized to a string.
}

// RequestVoteArgs is the argument structure for the RequestVote RPC.
message RequestVoteArgs {
    int32 term = 1;               // candidate’s term
    int32 candidate_id = 2;        // candidate requesting vote
    int64 last_log_index = 3;       // index of candidate’s last log entry
    int32 last_log_term = 4;        // term of candidate’s last log entry
}

// RequestVoteReply is the reply structure for the RequestVote RPC.
message RequestVoteReply {
    int32 term = 1;        // currentTerm, for candidate to update itself
    bool vote_granted = 2;  // true means candidate received vote
}

service Raft {
    rpc RequestVote(RequestVoteArgs) returns (RequestVoteReply);
    rpc AppendEntries(AppendEntriesArgs) returns (AppendEntriesReply);
    rpc InstallSnapshot(InstallSnapshotArgs) returns (InstallSnapshotReply);
}